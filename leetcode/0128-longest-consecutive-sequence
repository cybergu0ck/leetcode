# 128. Longest Consecutive Sequence

Medium level question on leetcode.

<br>
<br>

## Description

Find it [here](https://leetcode.com/problems/longest-consecutive-sequence/).

<br>
<br>

## Test Cases

The solution is not driven by test cases, However following test cases must be checked for.

1. nums = [100,4,200,1,3,2]
1. nums = []

<br>
<br>

## Solution

<br>

### Brute Force

```py

```

```cpp

```

<br>

### Efficient Solution

```py
class Solution:
  def longestConsecutive(self, nums: List[int]) -> int:
      res = 0
      num_set = set(nums) #O(n)
      for num in num_set:
          if num-1 not in num_set:
              length = 1
              while num + length in num_set:
                  length += 1
              res = max(res, length)
      return res
```

```cpp
#include <unordered_set>
#include <algorithm>

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        std::unordered_set<int> unique_nums;
        for(const auto& num:nums){      //O(n)
            unique_nums.insert(num);    //O(1) in the case of unordered_set and O(logn) in the case of set.
        }

        int res{0};
        int cur_length{0};
        for(auto num:unique_nums){  //O(m)
            cur_length = 1;
            auto is_found = unique_nums.find(num-1);    //O(1)
            if(is_found != unique_nums.end()){
                continue;
            }
            else{
                auto next_num = unique_nums.find(++num);
                while(next_num != unique_nums.end()){
                    ++cur_length;
                    next_num = unique_nums.find(++num);
                }
            }
            res = std::max(res, cur_length);
        }
        return res;
    }
};
```

- _"Insert numbers into a set, then start a sequence only at numbers without a predecessor and expand to find the longest streak."_

  1. Storing the unique numbers in an unordered set for faster lookups.
  1. Iterating over the set and run the core algorithm to find the length of the possible sequence.
  1. Execute the core algorithm only if the number forms a starting point for the sequence.
  1. Update the result with the length of the longest possible sequence.

- This has a linear $O(n)$ time complexity, where $n$ is the number of elements in the input vector.

  - In C++ implementation, the time complexity is linear $O(n)$ when using unordered_set and is quasilinear $O(n*log(n))$ if set is used as insertion is logarithmic.
  - This is not arguably $O(n^2)$ algorithm, because the inner while loop runs only when the num is such that it can start a sequence, so for the other numbers of the sequence it won't be run.

- This has a constant $O(1)$ space complexity.

<br>
<br>

## Notes

<br>
<br>

## Resources

- Checkout neetcode's video.

<br>
<br>
